package mum.cs401.cinemabooking.database;

import java.io.Closeable;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;

/**
 *
 * @author Enkh Amgalan Erdenebat
 */
abstract class Database {

    Connection conn;

    Database() {
    }

    abstract void connect() throws Exception;

    PreparedStatement preparedStatement(String sql, Object... os) throws SQLException {
        return preparedStatement(null, sql, os);
    }

    PreparedStatement preparedStatement(Integer autoGeneratedKeys, String sql, Object... os) throws SQLException {
        String csql = sql;
        for (int i = 0; i < os.length; i++) {
            Object o = os[i];
            csql = csql.replaceFirst("\\?", "##QMR" + i);
        }
        sql = csql.replaceAll("##QMR\\d+", "?");
        PreparedStatement ps = null;
        if (autoGeneratedKeys == null) {
            ps = conn.prepareStatement(sql);
        } else {
            ps = conn.prepareStatement(sql, autoGeneratedKeys);
        }
        String tmp = sql;
        int i = 1;
        String replaceKey = "QuestionMarkReplacement";
        tmp = tmp.replaceAll("\\?", replaceKey);
        for (Object o : os) {
            tmp = tmp.replaceFirst(replaceKey, o == null ? "NULL" : '\''
                    + o.toString().replace("$", "\\$") + '\'');
        }
        for (Object o : os) {
            if (o instanceof java.util.Date) {
                ps.setTimestamp(i++, new Timestamp(((java.util.Date) o).getTime()));
            } else {
                ps.setObject(i++, o);
            }
        }
        return ps;
    }

    CallableStatement callableStatement(String sql, Object... os) throws SQLException {
        String csql = sql;
        for (int i = 0; i < os.length; i++) {
            Object o = os[i];
            csql = csql.replaceFirst("\\?", "##QMR" + i);
        }
        sql = csql.replaceAll("##QMR\\d+", "?");
        CallableStatement ps = conn.prepareCall(sql);
        String tmp = sql;
        int i = 1;
        String replaceKey = "QuestionMarkReplacement";
        tmp = tmp.replaceAll("\\?", replaceKey);
        for (Object o : os) {
            tmp = tmp.replaceFirst(replaceKey, o == null ? "NULL" : '\''
                    + o.toString().replace("$", "\\$") + '\'');
        }
        for (Object o : os) {
            if (o instanceof java.util.Date) {
                ps.setTimestamp(i++, new Timestamp(((java.util.Date) o).getTime()));
            } else {
                ps.setObject(i++, o);
            }
        }
        return ps;
    }

    void close(Closeable c) {
        try {
            if (c != null) {
                c.close();
            }
        } catch (Exception ex) {
        }
    }

    void close(ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
            }
        } catch (Exception ex) {
        }
    }

    void close(Statement st) {
        try {
            if (st != null) {
                st.close();
            }
        } catch (Exception ex) {
        }
    }

    public void disconnect() {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (Exception ex) {
        }
    }
}
